<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Tom's Teaching Tidbits - Digital Technologies</title><link href="https://addictedtolearning.github.io/classgen-blog/" rel="alternate"></link><link href="https://addictedtolearning.github.io/classgen-blog/feeds/digital-technologies.atom.xml" rel="self"></link><id>https://addictedtolearning.github.io/classgen-blog/</id><updated>2018-07-22T11:00:00+09:30</updated><entry><title>Digital Technologies? Help me! Where do I even start?</title><link href="https://addictedtolearning.github.io/classgen-blog/digital-technologies-help-me-where-do-i-even-start.html" rel="alternate"></link><published>2018-07-22T11:00:00+09:30</published><updated>2018-07-22T11:00:00+09:30</updated><author><name>Tom Ranieri</name></author><id>tag:addictedtolearning.github.io,2018-07-22:/classgen-blog/digital-technologies-help-me-where-do-i-even-start.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#foundation-to-year-2"&gt;Foundation to Year 2&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#with-tech-beebots"&gt;💻 With tech: BeeBots 🐝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#without-tech-reduce-reuse-recycle"&gt;📝 Without tech: Reduce, reuse, recycle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#years-3-and-4"&gt;Years 3 and 4&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#with-tech-lego-mindstorms"&gt;💻 With tech: LEGO Mindstorms 🤖&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#without-tech-unplugged"&gt;📝 Without tech: Unplugged 🔌&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#years-5-and-6"&gt;Years 5 and 6&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#with-tech-scratch"&gt;💻 With tech: Scratch 😸&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#without-tech-binary-numbers"&gt;📝 Without tech: Binary numbers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#years-7-and-8"&gt;Years 7 and 8&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#with-tech-bbc-microbit-30-each"&gt;💻 With tech: BBC Microbit ($30 each)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#years-9-and-10"&gt;Years 9 …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#foundation-to-year-2"&gt;Foundation to Year 2&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#with-tech-beebots"&gt;💻 With tech: BeeBots 🐝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#without-tech-reduce-reuse-recycle"&gt;📝 Without tech: Reduce, reuse, recycle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#years-3-and-4"&gt;Years 3 and 4&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#with-tech-lego-mindstorms"&gt;💻 With tech: LEGO Mindstorms 🤖&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#without-tech-unplugged"&gt;📝 Without tech: Unplugged 🔌&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#years-5-and-6"&gt;Years 5 and 6&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#with-tech-scratch"&gt;💻 With tech: Scratch 😸&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#without-tech-binary-numbers"&gt;📝 Without tech: Binary numbers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#years-7-and-8"&gt;Years 7 and 8&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#with-tech-bbc-microbit-30-each"&gt;💻 With tech: BBC Microbit ($30 each)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#years-9-and-10"&gt;Years 9 and 10&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#with-tech-grok-learning-ncss-challenge-20-per-year-per-student-or-30-per-student-for-all-access"&gt;💻 With tech: Grok Learning NCSS Challenge ($20 per year, per student, or $30 per student for all-access)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#without-tech-planning-computer-programs"&gt;📝 Without tech: Planning computer programs 🤔&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#where-to-from-here"&gt;Where to from here?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;So you've been told that you have to deliver Digital Technologies. &lt;/p&gt;
&lt;p&gt;We often forget our students don't even have to touch anything digital, beeping, glowing, or electronic to learn digital technologies.&lt;/p&gt;
&lt;p&gt;For my first magic trick today, I'm going to give &lt;strong&gt;two ideas for every DigiTech band, from Foundation to Year 10&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;And just to make it more interesting, I'll do it blindfolded, with two hands tied behind my back, and &lt;strong&gt;for each band, I'll give an idea that doesn't use anything techy&lt;/strong&gt;. That means something you can do with &lt;strong&gt;🚫no iPad&lt;/strong&gt;, &lt;strong&gt;🚫nothing that beeps or lights up&lt;/strong&gt;, and &lt;strong&gt;🚫 no gosh-darn fancy-pants electricity&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;"Computer science is no more about computers than astronomy is about telescopes."&lt;/strong&gt; - Edsger Dijkstra&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="foundation-to-year-2"&gt;Foundation to Year 2&lt;/h2&gt;
&lt;h3 id="with-tech-beebots"&gt;💻 With tech: BeeBots 🐝&lt;/h3&gt;
&lt;video autoplay loop style="width:40%;padding:0px 10px; float:right"&gt;
  &lt;source src="https://addictedtolearning.github.io/classgen-blog/images/beebot-obstacle-course-short-compressed.mp4" type="video/mp4"&gt;
&lt;/video&gt;

&lt;p&gt;&lt;strong&gt;Using:&lt;/strong&gt; BeeBots (about $120, can be used in small groups)&lt;/p&gt;
&lt;p&gt;The beauty of BeeBots is that they do almost nothing at all.&lt;/p&gt;
&lt;p&gt;If you've ever tried to get a classroom full of 5-year-olds to follow a series of instructions on an iPad, you'll know how painful it can be to keep them engaged in a world of possibility.&lt;/p&gt;
&lt;p&gt;BeeBots are bright yellow robots, specifically designed for young little kidlets. Almost indestructible, they only have 7 buttons on them so that students can program very simple instructions for their bee.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://barefootcas.org.uk/wp-content/uploads/2014/09/Bee-Bots-1-2-3-Activity-Barefoot-Computing2.pdf"&gt;Get the lesson plan from Barefoot Computing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="without-tech-reduce-reuse-recycle"&gt;📝 Without tech: Reduce, reuse, recycle&lt;/h3&gt;
&lt;p&gt;Let's be real: 1-1 devices cost a bloody fortune. Even if your school can afford to have iPad for each student, failures are inevitable (just like in learning!).&lt;/p&gt;
&lt;p&gt;The easiest way to do Digital Technologies without tech, is to realise that &lt;em&gt;you are already doing Digital Technologies&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;🐻 Bear with me for a minute, and check out these content descriptions.&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td width=50%&gt;
"Collect, explore and sort data, and use digital systems to present the data creatively" (ACTDIP003)
&lt;/td&gt;
&lt;td width=50%&gt;
"Sort and classify familiar objects and explain the basis for these classifications. Copy, continue and create patterns with objects and drawings" (ACMNA005)
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Wanna know a secret? The one on the left is from Digital Technologies, and the one on the right is from Mathematics. They're not the same, but they're pretty darn close. There are a few of these hidden throughout the &lt;s&gt;National Curriculum&lt;/s&gt;, &lt;s&gt;ACARA&lt;/s&gt; Australian Curriculum, like super-secret Easter eggs. Watch out for the same things in other learning areas.&lt;/p&gt;
&lt;blockquote style="display:flex;align-items: center;"&gt;
 &lt;video autoplay loop style="width:40%;padding:0px 10px; "&gt;
  &lt;source src="https://addictedtolearning.github.io/classgen-blog/images/thinking_meme.mp4" type="video/mp4"&gt;
&lt;/video&gt;&lt;p&gt;If you've covered the rest of the Australian Curriculum, then you've already started your Digital Technologies journey&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's why it's important to check the DigiTech curriculum to see what you've covered, and then just plug in the gaps.&lt;/p&gt;
&lt;h2 id="years-3-and-4"&gt;Years 3 and 4&lt;/h2&gt;
&lt;h3 id="with-tech-lego-mindstorms"&gt;💻 With tech: LEGO Mindstorms 🤖&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Using:&lt;/strong&gt; LEGO Mindstorms EV3 (about $390 per kit, can be used in very small groups), typically with an iPad&lt;/p&gt;
&lt;video autoplay loop style="width:40%;padding:0px 10px; float:right"&gt;
  &lt;source src="https://addictedtolearning.github.io/classgen-blog/images/ev3.mp4" type="video/mp4"&gt;
&lt;/video&gt;

&lt;p&gt;I love that before students start to program their robots with EV3, they need to build them.&lt;/p&gt;
&lt;p&gt;This means that even before you grab the batteries or charge the thing up, students are already:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;learning how to follow written visual instructions&lt;/li&gt;
&lt;li&gt;collaborating via the "why doesn't mine look like yours?", and "how did you do this bit?"&lt;/li&gt;
&lt;li&gt;problem-solving issues along the way, and building resilience in the process&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the programming itself, I seen the LEGO EV3 robots used with Year 3, 4, 10 and even &lt;a href="https://www.adelaide.edu.au/course-outlines/006263/1/sem-2"&gt;university-level students&lt;/a&gt;. There is a lot of scope to go up or down.&lt;/p&gt;
&lt;h3 id="without-tech-unplugged"&gt;📝 Without tech: Unplugged 🔌&lt;/h3&gt;
&lt;p&gt;We're getting into CS Unplugged territory here -- a great resource!&lt;/p&gt;
&lt;p&gt;CS Unplugged have loads of resources for this age group, like the &lt;a href="https://csunplugged.org/en/topics/kidbots/"&gt;kidbots unit plan&lt;/a&gt;. This is probably my favourite technique to teach computer science: get students to plan out an algorithm, then physically walk out that algorithm. You can also get the kids to give instructions for you, which makes for &lt;a href="https://youtu.be/cDA3_5982h8"&gt;a very entertaining lesson&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="years-5-and-6"&gt;Years 5 and 6&lt;/h2&gt;
&lt;h3 id="with-tech-scratch"&gt;💻 With tech: Scratch 😸&lt;/h3&gt;
&lt;p&gt;I have so much respect for the impact that Scratch has had on CS education. Even though I love programming, I know that written code is a major turn-off for young coders. It's confusing and fussy and blegh.&lt;/p&gt;
&lt;p&gt;Luckily, there ⛵-loads of resources around the place. Are you the kind of teacher that wants a structured eBook to get started? Then check out the &lt;a href="http://scratched.gse.harvard.edu/guide/files/CreativeComputing20141015.pdf"&gt;Creative Computing eBook&lt;/a&gt;, which has tonnes of ideas and resources to structure a Scratch unit.&lt;/p&gt;
&lt;video autoplay loop style="width:40%;padding:0px 10px; float:right"&gt;
  &lt;source src="https://addictedtolearning.github.io/classgen-blog/images/scratch_cool_cat.mp4" type="video/mp4"&gt;
&lt;/video&gt;

&lt;h3 id="without-tech-binary-numbers"&gt;📝 Without tech: Binary numbers&lt;/h3&gt;
&lt;p&gt;CS Unplugged saves the day again! (Okay, okay! I promise this is the last time!)&lt;/p&gt;
&lt;p&gt;The beauty about their classic &lt;a href="https://classic.csunplugged.org/wp-content/uploads/2014/12/unplugged-01-binary_numbers.pdf"&gt;binary numbers&lt;/a&gt; lesson plan is that it is just so versatile. I've used it with Year 11 students and we had a boatload of fun. Well, I had fun, and that's what counts, right? 🤷&lt;/p&gt;
&lt;h2 id="years-7-and-8"&gt;Years 7 and 8&lt;/h2&gt;
&lt;h3 id="with-tech-bbc-microbit-30-each"&gt;💻 With tech: BBC Microbit ($30 each)&lt;/h3&gt;
&lt;video autoplay loop style="width:40%;padding:0px 10px; float:right"&gt;
  &lt;source src="https://addictedtolearning.github.io/classgen-blog/images/bbc_microbit.mp4" type="video/mp4"&gt;
&lt;/video&gt;

&lt;p&gt;&lt;a href="http://microbit.org/"&gt;BBC Microbit&lt;/a&gt; combines the drag-and-drop ease-of-use of Scratch with a microcontroller (tiny computer) that is packed with sensors. It's got 💡light, 🌏compass and 🌡temperature sensors, and has 🎮buttons, a 📺screen and heaps of cool other stuff.&lt;/p&gt;
&lt;p&gt;It is so easy to set up and use compared to an Arduino. I love Arduino to bits as a programmer, but you can tear your hair out trying to troubleshoot an entire screaming classroom of wires-in-the-wrong-places and struggle to get anywhere.&lt;/p&gt;
&lt;p&gt;Get the kids comfy with a Microbit first, then bust out the Arduino for the cluey coders in your class.&lt;/p&gt;
&lt;h2 id="years-9-and-10"&gt;Years 9 and 10&lt;/h2&gt;
&lt;h3 id="with-tech-grok-learning-ncss-challenge-20-per-year-per-student-or-30-per-student-for-all-access"&gt;💻 With tech: Grok Learning NCSS Challenge ($20 per year, per student, or $30 per student for all-access)&lt;/h3&gt;
&lt;p&gt;The Grok Learning NCSS challenge is amazing 😍. I've used it with Year 9 to 12 students, and every single time it is an absolute godsend 😇🙏🙌.&lt;/p&gt;
&lt;p&gt;What I like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It has enough scaffolding to support the challenges.&lt;/li&gt;
&lt;li&gt;It doesn't go all helicopter-mum and stop them making mistakes. Instead, it guides students back to the solution when they inevitably make an error.&lt;/li&gt;
&lt;li&gt;You can display the leaderboard during your lesson if you want to, and this competitive streak is great for both ends of the class. I know there are loads of counterarguments against leaderboards, but I've found that students at the bottom get a major wriggle-on when they actually realise that they need to put in the hard yards.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="without-tech-planning-computer-programs"&gt;📝 Without tech: Planning computer programs 🤔&lt;/h3&gt;
&lt;p&gt;&lt;img src="images/ux-sketching-7-e1513571125563.jpg" style="width:30%; float:right"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Plan and manage projects using an iterative and collaborative approach, identifying risks and considering safety and sustainability (ACTDIP044)&lt;/li&gt;
&lt;li&gt;Design algorithms represented diagrammatically and in structured English and validate algorithms and programs through tracing and test cases (ACTDIP040)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Students can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a flowchart that a computer could use to solve a problem. There are heaps of &lt;a href="https://www.edrawsoft.com/flowchart-examples-for-students.php"&gt;examples of flowcharts that you can show to students&lt;/a&gt;, which I've found is the best way to demonstrate the ♢&amp;nbsp;diamonds for decisions and the ▭&amp;nbsp;rectangles for actions.&lt;/li&gt;
&lt;li&gt;Break a larger project down into small tasks, and assign each task to individual team members. They can estimate timeframes using a &lt;a href="https://www.projectmanager.com/gantt-chart"&gt;Gantt chart&lt;/a&gt; on paper.&lt;/li&gt;
&lt;li&gt;Draw sketches of what their program/game/project/website will look like.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="where-to-from-here"&gt;Where to from here?&lt;/h1&gt;
&lt;p&gt;The &lt;a href="http://digitaltechnologieshub.edu.au"&gt;Digital Technologies Hub&lt;/a&gt; has units, lesson plans, and links to heaps of resources.
The &lt;a href="https://csermoocs.appspot.com"&gt;Computer Science MOOC&lt;/a&gt; from the University of Adelaide is a great PD that runs through more options for your year level.&lt;/p&gt;
&lt;p&gt;I'll post an organised bunch of DigiTech links/resources in a future post, so sign up to the mailing list to stay in the loop.&lt;/p&gt;</content></entry></feed>